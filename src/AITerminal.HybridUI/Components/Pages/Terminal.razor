@page "/terminal"
@using Microsoft.AspNetCore.Components.Web <!-- Ensure this for KeyboardEventArgs -->

<h3>Docker Commands - Local Suggestions</h3>

<div style="display: flex; flex-direction: column; height: 80vh;">
    <!-- Console Output -->
    <div style="flex: 1; overflow-y: auto; background-color: #111; color: #0f0; padding: 8px;">
        @if (consoleLines.Any())
        {
            @foreach (var line in consoleLines)
            {
                <div style="color:@line.Color;">@line.Text</div>
            }
        }
        else
        {
            <div>[No output yet]</div>
        }
    </div>


    <div style="margin-top: 8px;">

        <input value="@currentInput" @oninput="OnInputChanged" @onkeydown="HandleKeyDown" style="width: 80%;"
            placeholder="Type your command..." />

        @if (suggestions?.Any() == true)
        {
            <ul style="
                background: #222;
                color: #fff;
                list-style-type: none;
                margin:0;
                padding:4px;
                max-height: 150px;
                overflow-y: auto;">
                @for (int i = 0; i < suggestions.Count; i++)
                {
                    <li @key="i" class="@GetSuggestionCssClass(i)" @onclick="() => AcceptSuggestion(suggestions[i])">
                        @suggestions[i]
                    </li>
                }
            </ul>
        }
    </div>
</div>

@code {
    // ----------------------------
    // 1) Fields & Properties
    // ----------------------------
    private string currentInput = string.Empty;
    private List<string> suggestions = new();
    private int selectedIndex = -1; // which suggestion is highlighted?

    // Instead of a plain string list, we now have a list of ConsoleLine for color-coded output.
    private List<ConsoleLine> consoleLines = new();

    // Our local static Docker command list
    private static readonly List<string> DockerCommands = new()
{
"docker run", "docker start", "docker stop", "docker restart",
"docker pause", "docker unpause", "docker kill", "docker rm",
"docker ps", "docker ps -a", "docker inspect", "docker logs",
"docker stats", "docker top", "docker port", "docker diff",
"docker images", "docker pull", "docker push", "docker rmi",
"docker build", "docker tag", "docker save", "docker load",
"docker import", "docker attach", "docker exec", "docker cp",
"docker export", "docker commit", "docker network create",
"docker network connect", "docker network disconnect", "docker network ls",
"docker network rm", "docker network inspect", "docker network prune",
"docker volume create", "docker volume inspect", "docker volume ls",
"docker volume rm", "docker volume prune", "docker login", "docker logout",
"docker search", "docker info", "docker version", "docker compose up",
"docker compose down", "docker compose start", "docker compose stop",
"docker compose restart", "docker compose ps", "docker compose logs",
"docker compose build", "docker compose pull", "docker compose push",
"docker build --no-cache", "docker build -t", "docker build --pull",
"docker build --target", "docker run -d", "docker run -p", "docker run -v",
"docker run -e", "docker run --name", "docker run --rm", "docker run -it",
"docker run --network", "docker system df", "docker system prune",
"docker system info", "docker system events", "docker run --cpu-shares",
"docker run --memory", "docker run --dns", "docker run --entrypoint",
"docker run --user", "docker run --workdir", "docker run --read-only",
"docker run --restart", "docker swarm init", "docker swarm join",
"docker swarm leave", "docker service create", "docker service inspect",
"docker service ls", "docker service rm", "docker service scale",
"docker service update", "docker trust inspect", "docker trust key",
"docker trust revoke", "docker trust sign", "docker logs -f",
"docker logs --since", "docker logs --until", "docker logs --tail",
"docker checkpoint create", "docker checkpoint ls", "docker checkpoint rm",
"docker container prune", "docker image prune"
};

    // ----------------------------
    // 2) Methods for Suggestions
    // ----------------------------
    protected void OnInputChanged(ChangeEventArgs e)
    {
        // Clear old suggestions & reset selection
        suggestions.Clear();
        selectedIndex = -1;

        var typedText = e.Value?.ToString() ?? "";
        currentInput = typedText;

        if (string.IsNullOrWhiteSpace(typedText))
            return;

        // Grab up to 20 local recommendations
        var localRecs = DockerCommands
        .Where(cmd => cmd.StartsWith(typedText, StringComparison.OrdinalIgnoreCase))
        .Take(20)
        .ToList();

        if (localRecs.Any())
            suggestions.AddRange(localRecs);

        StateHasChanged();
    }

    private void AcceptSuggestion(string suggestion)
    {
        currentInput = suggestion;
        suggestions.Clear();
        selectedIndex = -1;
        StateHasChanged();
    }

    private string GetSuggestionCssClass(int index)
    {
        return index == selectedIndex ? "highlighted-suggestion" : "";
    }

    // ----------------------------
    // 3) Keyboard Handling
    // ----------------------------
    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "ArrowDown")
        {

            if (suggestions.Any())
            {
                selectedIndex++;
                if (selectedIndex >= suggestions.Count)
                    selectedIndex = 0; // wrap around
            }
        }
        else if (e.Key == "ArrowUp")
        {

            if (suggestions.Any())
            {
                selectedIndex--;
                if (selectedIndex < 0)
                    selectedIndex = suggestions.Count - 1;
            }
        }
        else if (e.Key == "Enter")
        {

            if (selectedIndex >= 0 && selectedIndex < suggestions.Count)
            {
                AcceptSuggestion(suggestions[selectedIndex]);
            }
            else
            {
                // Press Enter with no highlighted suggestion => run the typed command
                await RunCommand(currentInput);
            }
        }

        StateHasChanged();
    }

    // ----------------------------
    // 4) Running the Command
    // ----------------------------
    private async Task RunCommand(string command)
    {
        // 1) Clear suggestions & highlight
        suggestions.Clear();
        selectedIndex = -1;

        if (string.IsNullOrWhiteSpace(command))
            return;

        // 2) Show the command in the console (in cyan)
        consoleLines.Add(new ConsoleLine
            {
                Text = $"> {command}",
                Color = "cyan"
            });

        // 3) Actually execute the command
        var (stdout, stderr) = await ExecuteShellCommandAsync(command);

        // 4) Display normal output in white
        if (!string.IsNullOrEmpty(stdout))
        {
            var lines = stdout.Split('\n', StringSplitOptions.RemoveEmptyEntries);
            foreach (var line in lines)
            {
                consoleLines.Add(new ConsoleLine
                    {
                        Text = line,
                        Color = "#FFFFFF" // or "white"
                    });
            }
        }

        // 5) Display stderr in red
        if (!string.IsNullOrEmpty(stderr))
        {
            var lines = stderr.Split('\n', StringSplitOptions.RemoveEmptyEntries);
            foreach (var line in lines)
            {
                consoleLines.Add(new ConsoleLine
                    {
                        Text = line,
                        Color = "red"
                    });
            }
        }

        // Clear the input
        currentInput = string.Empty;
        StateHasChanged();
    }

    /// <summary>
    /// 5) Utility method to run shell commands and return (stdout, stderr).
    /// </summary>
    private async Task<(string stdout, string stderr)> ExecuteShellCommandAsync(string fullCommand)
    {
        // Split the first token as the program, the rest as arguments
        // e.g. "docker ps -a" => fileName="docker", arguments="ps -a"
        string[] parts = fullCommand.Split(' ', 2, StringSplitOptions.RemoveEmptyEntries);
        if (parts.Length == 0) return ("", "");

        var fileName = parts[0];
        var arguments = (parts.Length > 1) ? parts[1] : "";

        try
        {
            return await Task.Run(() =>
            {
                var startInfo = new System.Diagnostics.ProcessStartInfo
                    {
                        FileName = fileName,
                        Arguments = arguments,
                        RedirectStandardOutput = true,
                        RedirectStandardError = true,
                        UseShellExecute = false,
                        CreateNoWindow = true
                    };

                using var process = new System.Diagnostics.Process();
                process.StartInfo = startInfo;
                process.Start();

                string stdOut = process.StandardOutput.ReadToEnd();
                string stdErr = process.StandardError.ReadToEnd();
                process.WaitForExit();

                return (stdOut, stdErr);
            });
        }
        catch (Exception ex)
        {
            // If there's an error launching the process (e.g. command not found)
            return ("", $"[Error executing command: {ex.Message}]");
        }
    }

    public class ConsoleLine
    {
        public string Text { get; set; } = "";
        public string Color { get; set; } = "#FFFFFF"; // default white
    }

}
